name: CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      matrix:
        platform:
          - { name: Ubuntu x64, os: ubuntu-24.04 }
          - { name: Ubuntu arm64, os: ubuntu-24.04-arm }
          - {
              name: macOS x64,
              os: macos-latest,
              cmake-config: -DCMAKE_APPLE_SILICON_PROCESSOR=x86_64,
            }
          - {
              name: macOS arm64,
              os: macos-latest,
              cmake-config: -DCMAKE_APPLE_SILICON_PROCESSOR=arm64,
            }
          - { name: Windows 64-bit, os: windows-latest, cmake-config: -A x64 }
          - { name: Windows 32-bit, os: windows-latest, cmake-config: -A Win32 }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure project
        run: cmake -S . -B build -DCMAKE_COMPILE_WARNING_AS_ERROR=ON -DCMAKE_LINK_WARNING_AS_ERROR=ON -DBKCRACK_BUILD_TESTING=ON ${{ matrix.platform.cmake-config }}

      - name: Build project
        run: cmake --build build --config Release

      - name: Run tests
        run: ctest --test-dir build -C Release --output-on-failure

      - name: Create package
        run: cmake --build build --config Release --target package

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }} package
          path: |
            build/*.zip
            build/*.tar.gz

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest

    steps:
      - name: Install gcovr
        run: sudo apt update && sudo apt install gcovr

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure project
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBKCRACK_BUILD_TESTING=ON -DBKCRACK_BUILD_COVERAGE=ON

      - name: Build project
        run: cmake --build build

      - name: Run tests
        run: cmake --build build --target test

      - name: Collect coverage report
        run: cmake --build build --target coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

      - name: Upload coverage report
        run: curl -X POST https://coveralls.io/api/v1/jobs -F "json_file=@build/coverage.json" --fail-with-body

  format:
    name: Formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure project
        run: cmake -S . -B build -DBKCRACK_CLANG_FORMAT_EXECUTABLE=/usr/bin/clang-format-17

      - name: Format C++ code
        run: cmake --build build --target format

      - name: Check for difference
        run: git diff --exit-code

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, coverage, format]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          pattern: "* package"
          path: packages
          merge-multiple: true

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          files: packages/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
